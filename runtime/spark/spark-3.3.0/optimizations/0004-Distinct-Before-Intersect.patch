From fd7e807a302c50da9db2737819797ec87cd09bec Mon Sep 17 00:00:00 2001
From: haojin <hao.jin@intel.com>
Date: Tue, 27 Sep 2022 11:44:42 +0800
Subject: [PATCH] Support DISTINCT before INTERSECT

---
 .../sql/catalyst/optimizer/Optimizer.scala    | 33 +++++++++++++++++--
 .../apache/spark/sql/internal/SQLConf.scala   | 10 ++++++
 2 files changed, 40 insertions(+), 3 deletions(-)

diff --git a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/Optimizer.scala b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/Optimizer.scala
index a068f10694..da16568c8f 100644
--- a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/Optimizer.scala
+++ b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/Optimizer.scala
@@ -18,6 +18,7 @@
 package org.apache.spark.sql.catalyst.optimizer
 
 import scala.collection.mutable
+
 import org.apache.spark.sql.catalyst.analysis._
 import org.apache.spark.sql.catalyst.catalog.{InMemoryCatalog, SessionCatalog}
 import org.apache.spark.sql.catalyst.expressions._
@@ -2080,6 +2081,13 @@ object ReplaceDeduplicateWithAggregate extends Rule[LogicalPlan] {
  *   SELECT a1, a2 FROM Tab1 INTERSECT SELECT b1, b2 FROM Tab2
  *   ==>  SELECT DISTINCT a1, a2 FROM Tab1 LEFT SEMI JOIN Tab2 ON a1<=>b1 AND a2<=>b2
  * }}}
+ * If spark.sql.optimizer.distinctBeforeIntersect.enabled is set true, try to pushDown
+ * distinct through join to reduce data before shuffle operation.
+ * {{{
+ *   SELECT a1, a2 FROM Tab1 INTERSECT SELECT b1, b2 FROM Tab2
+ *   ==>  (SELECT DISTINCT a1, a2 FROM Tab1) LEFT SEMI JOIN
+ *   (SELECT DISTINCT b1, b2 FROM Tab2) ON a1<=>b1 AND a2<=>b2
+ * }}}
  *
  * Note:
  * 1. This rule is only applicable to INTERSECT DISTINCT. Do not use it for INTERSECT ALL.
@@ -2089,10 +2097,29 @@ object ReplaceDeduplicateWithAggregate extends Rule[LogicalPlan] {
 object ReplaceIntersectWithSemiJoin extends Rule[LogicalPlan] {
   def apply(plan: LogicalPlan): LogicalPlan = plan.transformWithPruning(
     _.containsPattern(INTERSECT), ruleId) {
-    case Intersect(left, right, false) =>
+    case i @ Intersect(left, right, false) =>
       assert(left.output.size == right.output.size)
-      val joinCond = left.output.zip(right.output).map { case (l, r) => EqualNullSafe(l, r) }
-      Distinct(Join(left, right, LeftSemi, joinCond.reduceLeftOption(And), JoinHint.NONE))
+      if (conf.getConf(SQLConf.DISTINCT_BEFORE_INTERSECT_ENABLED)) {
+        pushDownDistinctThroughJoin(i)
+      }
+      else {
+        val joinCond = left.output.zip(right.output).map { case (l, r) => EqualNullSafe(l, r) }
+        Distinct(Join(left, right, LeftSemi, joinCond.reduceLeftOption(And), JoinHint.NONE))
+      }
+  }
+
+  private def pushDownDistinctThroughJoin(plan: LogicalPlan): LogicalPlan = {
+    plan match {
+      case Intersect(left, right, false) =>
+        val leftPlan = pushDownDistinctThroughJoin(left)
+        val rightPlan = pushDownDistinctThroughJoin(right)
+        assert(leftPlan.output.size == rightPlan.output.size)
+        val joinCond = leftPlan.output.zip(rightPlan.output).map {
+          case (l, r) => EqualNullSafe(l, r) }
+        Join(leftPlan, rightPlan, LeftSemi, joinCond.reduceLeftOption(And), JoinHint.NONE)
+      case _ =>
+        Distinct(plan)
+    }
   }
 }
 
diff --git a/sql/catalyst/src/main/scala/org/apache/spark/sql/internal/SQLConf.scala b/sql/catalyst/src/main/scala/org/apache/spark/sql/internal/SQLConf.scala
index 3f832e7a76..bbf2610004 100644
--- a/sql/catalyst/src/main/scala/org/apache/spark/sql/internal/SQLConf.scala
+++ b/sql/catalyst/src/main/scala/org/apache/spark/sql/internal/SQLConf.scala
@@ -3788,6 +3788,16 @@ object SQLConf {
       .booleanConf
       .createWithDefault(true)
 
+  val DISTINCT_BEFORE_INTERSECT_ENABLED =
+    buildConf("spark.sql.optimizer.distinctBeforeIntersect.enabled")
+      .internal()
+      .doc(s"When this property is set to true, the query optimizer pushes the DISTINCT operator " +
+        s"to the children of INTERSECT if it detects that the DISTINCT operator can make the " +
+        s"left-semi join a BroadcastHashJoin instead of a SortMergeJoin,")
+      .version("3.3.0")
+      .booleanConf
+      .createWithDefault(false)
+
   /**
    * Holds information about keys that have been deprecated.
    *
-- 
2.20.1

